---
description: 
globs: 
alwaysApply: true
---
### Project Awareness and Context
- Always read `docs/PLANNING.md` at the start of a new converstion to understand the project's archiecture, goals, style and constraints.
- Check `docs/TASK.md` before starting a new task. If the task isnt listed, add it with a brief description and today's date
- use consistent naming convetions, file structure and archiecture patterns as describe in `docs/PLANNING.md`

### Code Structure and Modularity
- Never create a file longer than 500 lines of code. if a file approaches this limit, refactor by splitting it inot modules or helper files.
### Testing and Realiability
- Always create unit tests for new features (functions, classes, moduels, routes, etc)
- After updating any logic, check whethere existing unit tests to be updated. If so, do it.
- Tests should include a least 1 test for expected use, 1 edge case and 1 failure case.

### Documentation and Explainability
- Update `README.md` when new features are added, dependencides changes, or setup steps are modified.
- Comment non-obvious code and ensure everthing is understandable to mid-level developer.
- When writing complex logic, add an inline `# Reason: comment` eplainning the whym not just the what.

### AI Behavior Rules
- Never assume missing context. Ask questions if uncertain.
- Never hallucinate libraries or functions - only use known verified packages/libraries.
- Always confirm file paths and modules name exist before referencing them in code or tests.
- Never delete or overwrite existing code unless explicitly instuctured to or if part of a task from `docs/TASK.md`.